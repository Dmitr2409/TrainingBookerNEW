import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler

import config
from data_store import store
from keyboard_markups import (
    main_menu_keyboard, generate_dates_keyboard, generate_times_keyboard,
    generate_bookings_keyboard, booking_actions_keyboard, admin_menu_keyboard,
    admin_bookings_keyboard, admin_booking_actions_keyboard, cancel_keyboard,
    admin_confirm_reset_keyboard
)
from utils import validate_phone_number, validate_name, format_booking_info

# Define states for conversation handlers
(
    SELECTING_DATE, SELECTING_TIME, ENTERING_NAME, ENTERING_PHONE,
    CONFIRMING_BOOKING, VIEWING_BOOKINGS, ADMIN_AUTH, ADMIN_MENU,
    VIEWING_ADMIN_BOOKINGS, ADMIN_CONFIRMING_RESET
) = range(10)

# Command handlers
def start_command(update: Update, context: CallbackContext):
    """Handler for the /start command"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    # Clear any existing user state
    store.clear_user_state(user_id)
    
    update.message.reply_text(
        welcome_message,
        reply_markup=main_menu_keyboard()
    )
    
    return ConversationHandler.END

def help_command(update: Update, context: CallbackContext):
    """Handler for the /help command"""
    help_text = (
        "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å* - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–±—Ä–∞–≤ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
        "*üîç –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–º–µ–Ω–∞ –≤–∞—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"
        "*‚è∞ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è* - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏\n"
        "*üë§ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å* - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    
    update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

# Booking flow handlers
def start_booking(update: Update, context: CallbackContext):
    """Start the booking process by showing available dates"""
    user_id = update.effective_user.id
    
    # Initialize new booking state with required fields
    initial_data = {
        'user_id': user_id,
        'state': 'booking'
    }
    
    # Set initial state
    store.set_user_state(user_id, 'booking', initial_data)
    
    # Get available dates for booking
    dates = config.get_date_range()
    
    update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=generate_dates_keyboard(dates)
    )
    
    return SELECTING_DATE

def date_selected(update: Update, context: CallbackContext):
    """Handle date selection and show available times"""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    selected_date = query.data.split('_')[1]  # Extract date from callback
    
    # Update user state with selected date
    user_state = store.get_user_state(user_id)
    if 'data' not in user_state:
        user_state['data'] = {}
    user_state['data']['selected_date'] = selected_date
    store.set_user_state(user_id, 'booking', user_state['data'])
    
    # Get available time slots for the selected date
    all_time_slots = config.get_available_time_slots()
    available_slots = store.get_available_slots(selected_date, all_time_slots)
    
    if not available_slots:
        query.edit_message_text(
            f"–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
            reply_markup=generate_dates_keyboard(config.get_date_range())
        )
        return SELECTING_DATE
    
    # Format the date for display (YYYY-MM-DD to DD.MM.YYYY)
    display_date = selected_date.split('-')
    display_date = f"{display_date[2]}.{display_date[1]}.{display_date[0]}"
    
    query.edit_message_text(
        f"–î–∞—Ç–∞: {display_date}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=generate_times_keyboard(available_slots)
    )
    
    return SELECTING_TIME

def time_selected(update: Update, context: CallbackContext):
    """Handle time selection and ask for user's name"""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    selected_time = query.data.split('_')[1]  # Extract time from callback
    
    # Get or initialize user state
    user_state = store.get_user_state(user_id)
    if 'data' not in user_state:
        user_state['data'] = {}
    
    # Update user state with selected time
    user_state['data']['selected_time'] = selected_time
    store.set_user_state(user_id, 'booking', user_state['data'])
    
    query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=cancel_keyboard()
    )
    
    return ENTERING_NAME

def name_entered(update: Update, context: CallbackContext):
    """Handle name input and ask for phone number"""
    user_id = update.effective_user.id
    name = update.message.text.strip()
    
    # Validate name
    if not validate_name(name):
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, 2-50 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=cancel_keyboard()
        )
        return ENTERING_NAME
    
    # Get or initialize user state
    user_state = store.get_user_state(user_id)
    if 'data' not in user_state:
        user_state['data'] = {}
    
    # Update user state with entered name
    user_state['data']['name'] = name
    store.set_user_state(user_id, 'booking', user_state['data'])
    
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=cancel_keyboard()
    )
    
    return ENTERING_PHONE

def phone_entered(update: Update, context: CallbackContext):
    """Handle phone number input and confirm booking"""
    user_id = update.effective_user.id
    phone = update.message.text.strip()
    
    # Get current user state
    user_state = store.get_user_state(user_id)
    if not user_state or 'data' not in user_state:
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
        
    # Validate phone number
    if not validate_phone_number(phone):
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=cancel_keyboard()
        )
        return ENTERING_PHONE
    
    # Get or initialize user state
    user_state = store.get_user_state(user_id)
    if 'data' not in user_state:
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    
    # Update user state with entered phone
    user_state['data']['phone'] = phone
    store.set_user_state(user_id, 'booking', user_state['data'])
    
    # Check if we have all required data
    required_fields = ['selected_date', 'selected_time', 'name']
    if not all(field in user_state['data'] for field in required_fields):
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    
    # Get booking details for confirmation
    booking_data = user_state['data']
    date_parts = booking_data['selected_date'].split('-')
    display_date = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
    
    confirmation_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        f"üìÖ –î–∞—Ç–∞: {display_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {booking_data['selected_time']}\n"
        f"üë§ –ò–º—è: {booking_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['phone']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    # Create confirmation keyboard
    keyboard = [
        [{"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": "confirm_booking"}],
        [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel_operation"}]
    ]
    
    update.message.reply_text(
        confirmation_text,
        reply_markup={"inline_keyboard": keyboard}
    )
    
    return CONFIRMING_BOOKING

def confirm_booking(update: Update, context: CallbackContext):
    """Handle booking confirmation and save booking"""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    user_state = store.get_user_state(user_id)
    booking_data = user_state['data']
    
    # Check if the time slot is still available
    if not store.is_time_slot_available(booking_data['selected_date'], booking_data['selected_time']):
        query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=None
        )
        
        # Restart the booking process
        dates = config.get_date_range()
        query.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=generate_dates_keyboard(dates)
        )
        return SELECTING_DATE
    
    # Save the booking
    booking_id = store.add_booking(
        user_id,
        booking_data['selected_date'],
        booking_data['selected_time'],
        booking_data['name'],
        booking_data['phone']
    )
    
    # Clear user state
    store.clear_user_state(user_id)
    
    query.edit_message_text(
        "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: #{booking_id}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'.",
        reply_markup=None
    )
    
    return ConversationHandler.END

def view_available_times(update: Update, context: CallbackContext):
    """Show available time slots for the next several days"""
    dates = config.get_date_range()
    all_time_slots = config.get_available_time_slots()
    
    availability_text = "‚è∞ *–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n"
    
    for date in dates:
        # Get available slots for this date
        available_slots = store.get_available_slots(date, all_time_slots)
        
        # Format the date for display
        date_parts = date.split('-')
        display_date = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
        
        if available_slots:
            # Format the slots in groups of 3 for readability
            slot_groups = [available_slots[i:i+3] for i in range(0, len(available_slots), 3)]
            formatted_slots = '\n'.join([', '.join(group) for group in slot_groups])
            
            availability_text += f"üìÖ *{display_date}*:\n{formatted_slots}\n\n"
        else:
            availability_text += f"üìÖ *{display_date}*: –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤\n\n"
    
    update.message.reply_text(
        availability_text,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

# My bookings handlers
def view_my_bookings(update: Update, context: CallbackContext):
    """Show user's bookings with options to cancel"""
    user_id = update.effective_user.id
    
    # Get all bookings for this user
    user_bookings = store.get_bookings_for_user(user_id)
    
    if not user_bookings:
        update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    
    update.message.reply_text(
        "üîç –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=generate_bookings_keyboard(user_bookings)
    )
    
    return VIEWING_BOOKINGS

def view_booking_details(update: Update, context: CallbackContext):
    """Show details for a specific booking"""
    query = update.callback_query
    query.answer()
    
    booking_id = int(query.data.split('_')[1])
    booking = store.bookings.get(booking_id)
    
    if not booking:
        query.edit_message_text(
            "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=generate_bookings_keyboard(
                store.get_bookings_for_user(update.effective_user.id)
            )
        )
        return VIEWING_BOOKINGS
    
    booking_info = format_booking_info(booking)
    
    query.edit_message_text(
        f"üìã *–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking_id}*\n\n{booking_info}",
        reply_markup=booking_actions_keyboard(booking_id),
        parse_mode='Markdown'
    )
    
    return VIEWING_BOOKINGS

def cancel_booking(update: Update, context: CallbackContext):
    """Cancel a specific booking"""
    query = update.callback_query
    query.answer()
    
    booking_id = int(query.data.split('_')[1])
    
    # Attempt to cancel the booking
    success = store.cancel_booking(booking_id)
    
    if success:
        query.edit_message_text(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
        
        # Show updated bookings list
        user_bookings = store.get_bookings_for_user(update.effective_user.id)
        
        if user_bookings:
            query.message.reply_text(
                "üîç –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=generate_bookings_keyboard(user_bookings)
            )
        else:
            query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
                reply_markup=main_menu_keyboard()
            )
            return ConversationHandler.END
    else:
        query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
        
        # Return to main menu
        query.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    
    return VIEWING_BOOKINGS

# Admin panel handlers
def admin_panel(update: Update, context: CallbackContext):
    """Access the admin panel"""
    user_id = update.effective_user.id
    
    # Check if user is in the admin list
    if user_id in config.ADMIN_IDS:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–º ID
        store.authenticate_admin(user_id)
        update.message.reply_text(
            "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_menu_keyboard(),
            parse_mode='Markdown'
        )
        return ADMIN_MENU
        
    # Check if already authenticated
    if store.is_admin_authenticated(user_id):
        update.message.reply_text(
            "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_menu_keyboard(),
            parse_mode='Markdown'
        )
        return ADMIN_MENU
    
    # Ask for password
    update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADMIN_AUTH

def admin_auth(update: Update, context: CallbackContext):
    """Authenticate admin with password"""
    user_id = update.effective_user.id
    password = update.message.text.strip()
    
    # Delete message with password for security
    update.message.delete()
    
    if password == config.ADMIN_PASSWORD:
        # Authenticate admin
        store.authenticate_admin(user_id)
        
        update.message.reply_text(
            "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.\n\n"
            "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_menu_keyboard(),
            parse_mode='Markdown'
        )
        return ADMIN_MENU
    else:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n"
            "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

def admin_view_all_bookings(update: Update, context: CallbackContext):
    """Admin view of all bookings"""
    query = update.callback_query
    query.answer()
    
    all_bookings = store.get_all_bookings()
    
    if not all_bookings:
        query.edit_message_text(
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
            reply_markup=admin_menu_keyboard()
        )
        return ADMIN_MENU
    
    query.edit_message_text(
        "üìã *–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=admin_bookings_keyboard(all_bookings),
        parse_mode='Markdown'
    )
    
    return VIEWING_ADMIN_BOOKINGS

def admin_view_booking_details(update: Update, context: CallbackContext):
    """Admin view of specific booking details"""
    query = update.callback_query
    query.answer()
    
    booking_id = int(query.data.split('_')[2])  # Extract ID from admin_view_X
    booking = store.bookings.get(booking_id)
    
    if not booking:
        query.edit_message_text(
            "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=admin_bookings_keyboard(store.get_all_bookings())
        )
        return VIEWING_ADMIN_BOOKINGS
    
    booking_info = format_booking_info(booking)
    
    query.edit_message_text(
        f"üìã *–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking_id}*\n\n{booking_info}",
        reply_markup=admin_booking_actions_keyboard(booking_id),
        parse_mode='Markdown'
    )
    
    return VIEWING_ADMIN_BOOKINGS

def admin_cancel_booking(update: Update, context: CallbackContext):
    """Admin cancellation of a booking"""
    query = update.callback_query
    query.answer()
    
    booking_id = int(query.data.split('_')[2])  # Extract ID from admin_cancel_X
    
    # Attempt to cancel the booking
    success = store.cancel_booking(booking_id)
    
    if success:
        query.edit_message_text(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
        
        # Show updated bookings list
        all_bookings = store.get_all_bookings()
        
        if all_bookings:
            query.message.reply_text(
                "üìã *–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*",
                reply_markup=admin_bookings_keyboard(all_bookings),
                parse_mode='Markdown'
            )
        else:
            query.message.reply_text(
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
                reply_markup=admin_menu_keyboard()
            )
            return ADMIN_MENU
    else:
        query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=admin_menu_keyboard()
        )
        return ADMIN_MENU
    
    return VIEWING_ADMIN_BOOKINGS

def admin_reset_all_prompt(update: Update, context: CallbackContext):
    """Prompt for confirmation before resetting all bookings"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!* ‚ö†Ô∏è\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=admin_confirm_reset_keyboard(),
        parse_mode='Markdown'
    )
    
    return ADMIN_CONFIRMING_RESET

def admin_reset_all_bookings(update: Update, context: CallbackContext):
    """Reset all bookings in the system"""
    query = update.callback_query
    query.answer()
    
    # Reset bookings in the data store
    store.bookings = {}
    store.user_bookings = {}
    store.booking_counter = 1
    
    query.edit_message_text(
        "‚úÖ –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
        reply_markup=admin_menu_keyboard()
    )
    
    return ADMIN_MENU

# Navigation handlers
def back_to_main(update: Update, context: CallbackContext):
    """Return to main menu"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=None
    )
    
    return ConversationHandler.END

def back_to_dates(update: Update, context: CallbackContext):
    """Return to date selection"""
    query = update.callback_query
    query.answer()
    
    dates = config.get_date_range()
    
    query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=generate_dates_keyboard(dates)
    )
    
    return SELECTING_DATE

def back_to_bookings(update: Update, context: CallbackContext):
    """Return to bookings list"""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    user_bookings = store.get_bookings_for_user(user_id)
    
    query.edit_message_text(
        "üîç –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=generate_bookings_keyboard(user_bookings)
    )
    
    return VIEWING_BOOKINGS

def back_to_admin(update: Update, context: CallbackContext):
    """Return to admin menu"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_menu_keyboard(),
        parse_mode='Markdown'
    )
    
    return ADMIN_MENU

def back_to_admin_bookings(update: Update, context: CallbackContext):
    """Return to admin bookings list"""
    query = update.callback_query
    query.answer()
    
    all_bookings = store.get_all_bookings()
    
    query.edit_message_text(
        "üìã *–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*",
        reply_markup=admin_bookings_keyboard(all_bookings),
        parse_mode='Markdown'
    )
    
    return VIEWING_ADMIN_BOOKINGS

def cancel_operation(update: Update, context: CallbackContext):
    """Cancel the current operation and return to main menu"""
    query = update.callback_query
    if query:
        query.answer()
        query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.",
            reply_markup=None
        )
    else:
        update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )
    
    return ConversationHandler.END

# Message handler for text buttons
def handle_text_buttons(update: Update, context: CallbackContext):
    """Handle main menu text buttons"""
    text = update.message.text
    
    if text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å":
        return start_booking(update, context)
    elif text == "üîç –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
        return view_my_bookings(update, context)
    elif text == "üìã –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
        all_bookings = store.get_all_bookings()
        if not all_bookings:
            update.message.reply_text(
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
                reply_markup=main_menu_keyboard()
            )
            return ConversationHandler.END
            
        bookings_text = "üìã *–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n"
        for booking in all_bookings:
            date_parts = booking['date'].split('-')
            display_date = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
            bookings_text += (
                f"*{display_date} {booking['time']}*\n"
                f"üë§ –ò–º—è: {booking['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking['phone']}\n\n"
            )
        
        update.message.reply_text(
            bookings_text,
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    elif text == "‚è∞ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è":
        return view_available_times(update, context)
    elif text == "üë§ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
        return admin_panel(update, context)
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
